#!@bashrun@
# -*- mode: sh; -*-

function usage {
    test -n "$1" && echo "error: $1";
    
    cat <<EOT
usage: make-cpan-dist Options

Utility to create a CPAN distribution. See 'man make-cpan-dist'

Options
-------
-a author      - author (ex: Anonymouse <anonymouse@example.org>)
-b buildspec   - use a buildspec file instead of options
-d description - description to be included CPAN
-D file        - use file as the dependency list
-e path        - path for extra .pl files to package
-h             - help
-f file        - file containing a list of extra files to include
-l path        - path to Perl modules
-m name        - module name
-o dir         - output directory (default: current directory)
-p             - preserve Makefile.PL
-P file        - file that contains a list of modules to be packaged
-r pgm         - script or program to list dependencies
-s             - use scandeps.pl to find dependncies
-R yes/no      - recurse directories for files to package (default: yes)
-t path        - path to test files
-v             - more verbose output
-x             - do not cleanup files

NOCLEANUP=1, PRESERVE_MAKEFILE=1 can also be passed as environment variables.

Copyright (c) 2019 Robert C. Lauer, All rights reserved.
This is free software and may be used for any purpose without charge.
EOT
    
    exit;
}

# look for project home directory from here back, sets PROJECT_HOME
function find_git_home {
    project_home="..";
    git_home=""

    while true; do
        git_home=$(find "$project_home" -type d -path "*/.git");

        PROJECT_HOME=$(cd $project_home; pwd)
        test -n "$git_home" && break;

        project_home="../$project_home"

        if [ "$PROJECT_HOME" = "/" ]; then
            PROJECT_HOME=""
            break;
        fi
    done
}

# cleanup on exit
function cleanup {

    test -n "$NOCLEANUP" && return;
    
    test -n "$testsfile" && rm "$testsfile"
    test -n "$tmp_gitdir" && rm -rf "$tmp_gitdir"
    test -n "$package_files" && rm "$package_files"
    test -n "$exe_files" && rm "$exe_files"
    
    if test -n "$workdir"; then
        for a in requires test-requires provides; do
            rm -f ${workdir}/$a ${workdir}/$a.tmp
        done
    fi

    test -n "$builddir" && rm -rf "$builddir"
}

# default dependency finder
function perl_requires {
    if test -n "@PERL_REQUIRES@"; then
        /usr/lib/rpm/perl.req "$1" | perl -npe 's/^perl\((.*)\)/$1/'
    else
        echo "no /usr/lib/rpm/perl.req found!"
        echo "Install rpm-build package or use the -r option to provide your own dependency checker"
        exit 1;
    fi
}

# attempts to grab module versions
function get_module_versions {
    infile="$1"
    
    if ! test -e "$infile"; then
        echo "file $infile not found!"
        return;
    fi
    
    for a in $(sort -u "$infile" | perl -npe 's/^perl\((.*)\)$/$1/;'); do
        if test -n "$a"; then
            @perlenv@ -I ${perl5libdir} -M$a -e 'print "'$a'"," ", $'$a'::VERSION,"\n";' 2>/dev/null || echo "$a 0" || true;
        fi
    done
}

function scan() {
    scan_target="$1";
    
    if [ "$PERL_REQUIRES" = "SCANDEPS" ]; then
        if test -z "@scandeps@"; then
            echo "no scandeps.pl found!"
            exit 1
        else
            set -o pipefail
            if ! @scandeps@ -R $scan_target | perl -npe "s/^\'(.*?)\'.*\$/\$1/;" >>${workdir}/requires.tmp; then
                echo "ERROR: could not resolve dependencies for $scan_target"
                exit 1;
            fi
        fi
    else
        $PERL_REQUIRES $scan_target >> ${workdir}/requires.tmp
    fi
}

# +--------------------+
# | SCRIPT STARTS HERE |
# +--------------------+

OPTS=$(getopt -o b:D:e:sphg:t:a:m:d:r:l:o:vxf:R:P:z -- "$@")

if [ $? -ne 0 ]; then
    echo "could not parse options"
    exit $?
fi

eval set -- "$OPTS"

set -e

while [ $# -gt 0 ]; do
    case "$1" in
        -e)
            perl5bindir="$2";
            shift;
            shift;
            ;;
        
        -z)
            DRYRUN="--dryrun";
            shift;
            ;;
        
        -b) BUILDSPEC="$2";
            shift;
            shift;
            ;;
        -D)
            dependency_file="$2";
            shift;
            shift;
            ;;
        
        -s)
            PERL_REQUIRES="SCANDEPS"
            shift;
            ;;
        -R)
            recurse_directories="$2";
            shift;
            shift;
            ;;
        -P)
            provides="$2";
            test -n "$provides" && recurse_directories="no"
            shift;
            shift;
            ;;
        -f)
            EXTRA="$2";
            shift;
            shift;
            ;;
        -x)
            NOCLEANUP="$1";
            shift;
            ;;
        -p)
            PRESERVE_MAKEFILE="$1";
            shift;
            ;;
        -v)
            VERBOSE="$1";
            shift;
            ;;
        -o)
            destdir="$2";
            shift;
            shift;
            ;;
        -a)
            author="$2";
            shift;
            shift;
            ;;
	-h)
	    usage;
	    ;;
        -m)
            module="$2";
            shift;
            shift;
            ;;
        -d)
            description="$2";
            shift;
            shift;
            ;;
        -g)
            git_project="$2";
            shift;
            shift;
            ;;
        -l)
            perl5libdir="$2";
            shift;
            shift;
            ;;
        -r)
            PERL_REQUIRES="$2";
            shift;
            shift;
            ;;
        -t)
            testsdir="$2";
            shift;
            shift;
            ;;
	--)
	    break;
	    ;;
	*)
	    break;
	    ;;
    esac
done

shift;

if test -n "$BUILDSPEC"; then
    PROJECT_HOME=$PROJECT_HOME @libexecdir@/make-cpan-dist.pl \
                -b $BUILDSPEC $DRYRUN
    exit $?;
fi

test -z "$module" && usage "no module specified";
test -z "$author" && usage "no author specified";
test -z "$description" && usage "no description";

recurse_directories=${recurse_directories:-yes}

# tarball destination directory
destdir=${destdir:-$(pwd)}

if test -n "$git_project"; then
    tmp_gitdir=$(mktemp -d)
    PROJECT_HOME=$tmp_gitdir
    git clone $git_project $PROJECT_HOME
    cd $PROJECT_HOME
    set -e -o pipeline
    if test -e configure.ac; then
        autoreconf -i --force && ./configure --with-perlibdir=yes && make
    fi
else
    PROJECT_HOME=$(pwd)
fi

if test -z "$PROJECT_HOME"; then
    usage "could not find project home"
fi

# typical directory within project tree containing Perl modules
perl5libdir=${perl5libdir:-src/main/perl/lib}

# program that will provide the dependency list
PERL_REQUIRES=${PERL_REQUIRES:-perl_requires}

builddir=$(mktemp -d)

trap cleanup EXIT

module_file="$(echo "$module" | perl -npe "s/::/\//g").pm"

mkdir -p ${builddir}/lib/$(dirname $module_file);
    
if ! test -e "${PROJECT_HOME}/${perl5libdir}/$module_file"; then
    echo "no "${PROJECT_HOME}/${perl5libdir}/$module_file" found!"
    exit;
fi

if test -n "$EXTRA"; then
    if test -s "$EXTRA"; then
        for a in $(cat $EXTRA); do
            test -d $(dirname $a) || mkdir -p $(dirname $a)
            cp $a $builddir
        done
    else
        echo "No EXTRA file ($EXTRA) found in $(pwd)!"
    fi
fi

workdir=$(pwd)
package_files=$(mktemp);
exe_files=$(mktemp);

if test -n "$perl5bindir"; then
    find ${PROJECT_HOME}/${perl5bindir} -name '*.pl' > $exe_files;
    find ${PROJECT_HOME}/${perl5bindir} -name '*.sh' >> $exe_files;
fi

if [ "$recurse_directories" = "yes" ]; then
    find ${PROJECT_HOME}/${perl5libdir} -name '*.pm' > $package_files;
    
else
    if test -n "$provides"; then
        if test -s "$provides"; then
            for a in $(cat $provides); do
                echo "${PROJECT_HOME}/${perl5libdir}/$a" >> $package_files
            done
        else
            echo "empty provides file"
            exit 1;
        fi
    else
        echo "$module.pm" > $package_files
    fi
fi

if test -z "$dependency_file"; then
    for a in $(cat $package_files); do
        required_module=${a##${PROJECT_HOME}/${perl5libdir}/}
        echo $required_module >> ${workdir}/provides.tmp
        mkdir -p $(dirname ${builddir}/lib/$required_module)
        cp $a ${builddir}/lib/$required_module
        scan $a;
    done
    
    # find dependencies for .pl files
    if test -s "$exe_files"; then
        mkdir -p ${builddir}/bin
        
        for a in $(cat $exe_files); do
            cp $a ${builddir}/bin
            scan $a;
        done
    fi
else
    if [ $(basename $dependency_file) = "cpanfile" ]; then
        if test -n $(which cpanfile-dump 2>/dev/null); then
            cpanfile-dump "$dependency_file" >${workdir}/requires.tmp
        else
            echo "WARNING: cpanfile-dump not found!"
        fi
    else
        cat $dependency_file > ${workdir}/requires.tmp
    fi
fi

if ! test -s ${workdir}/requires.tmp; then
    (>&2 echo "WARNING: no dependencies will be listed for this distribution!")
    touch ${workdir}/requires.tmp
fi

cat ${workdir}/provides.tmp | perl -npe 's/\//::/g; s/\.pm$//;' | sort > ${workdir}/provides
sort -u ${workdir}/requires.tmp > ${workdir}/requires

# remove provided files from required list
comm -23 ${workdir}/requires ${workdir}/provides > ${workdir}/requires.tmp

# get the module versions we are currently using
get_module_versions ${workdir}/requires.tmp > ${workdir}/requires

if test -n "$testsdir"; then
    if test -d "$testsdir"; then
        testsfile=$(mktemp);
        ls -1 ${testsdir}/*.t >$testsfile 2>/dev/null || true
        if test -s "$testsfile"; then
            mkdir ${builddir}/t
        
            for a in $(cat $testsfile); do
                cp $PROJECT_HOME/$a ${builddir}/t/
                $PERL_REQUIRES $PROJECT_HOME/$a >> ${workdir}/test-requires.tmp
            done
            
            # remove provided files from required list
            sort -u ${workdir}/test-requires.tmp > ${workdir}/test-requires
            comm -23 ${workdir}/test-requires  ${workdir}/provides > ${workdir}/test-requires.tmp
            
            get_module_versions test-requires.tmp > ${workdir}/test-requires
        else
            rm -f "$testsfile";
            testsfile="";
        fi
    fi
fi

test -n "$VERBOSE" && cat ${workdir}/requires
test -n "$VERBOSE" && test -e ${workdir}/test-requires && cat ${workdir}/test-requires

# create the Makefile.PL
PROJECT_HOME=$PROJECT_HOME @libexecdir@/make-cpan-dist.pl \
            -r ${workdir}/requires \
            -e $exe_files \
            -t ${workdir}/test-requires \
            -m "$module" \
            -d "$description" \
            -a "$author" > $builddir/Makefile.PL

# if that was successful, then try to build the distribution
if ! test -e $builddir/Makefile.PL; then
    echo "failed to build Makefile.PL"
    exit;
else
    cd $builddir
    test -n "$VERBOSE" && tree
    test -n "$VERBOSE" && cat Makefile.PL
    
    if perl Makefile.PL; then
        make manifest
        make dist
        cp *.tar.gz $destdir
        make test
        test -n "$PRESERVE_MAKEFILE" && cp Makefile.PL $destdir
        echo "CPAN authors: cpan-upload-http $(ls -1rt *.tar.gz | tail -1)"
    fi
fi
