#!@perlrun@

# a CPAN distribution creation utility

use strict;
use warnings;

use Carp;
use Data::Dumper;
use English qw/-no_match_vars/;
use Getopt::Long qw(:config no_ignore_case );
use File::Temp qw/:POSIX/;
use JSON::PP;

use YAML::Syck;
use Scalar::Util qw/reftype/;

our $VERSION = '@PACKAGE_VERSION@';

=pod

=head1 NAME

make-cpan-spec.pl

=head1 SYNOPSIS

 @libexecdir@/make-cpan-spec.pl \
   --module Some::Module \
   --author 'Rob Lauer <rlauer6@comcast.net>' \
   --abstract 'my wonderful module'

=head1 DESCRIPTION

Utility that is part of the toolchain to create a simple CPAN
distribution. This utility is typically called from the C<bash> helper
script of the same name or can be passed a build specfication file in
YAML format.

The helper script (F<make-cpan-dist>) does most of the heavy lifting,
doing things for you like attempting to resolve dependencies and
packaging the distribution as a tarball.

In general you should consider using the C<bash> script or create a
F<buildspec.yml> file and invoke this utility with the C<-b> option
described below rather than calling this script directly.

=head2 Using the Bash Script

Assuming you have a module named C<Foo::Bar> in a directory named
F<lib> and some tests in a directory named F<t>, you might try:

 make-cpan-dist -l lib -t t -m Foo::Bar \
  -a 'Rob Lauer <rlauer6@comcast.net>' -d 'the Foo::Bar module!'

=head2 Using F<buildspec.yml>

 make-cpan-dist.pl -b buildspec.yml

Calling this utility directly with the C<-b> option will invoke the
C<bash> script and is probably the preferred way of using this
toolchain. If you insist on using this utility directly anyway, read
on.

=head1 OPTIONS

=over 5

=item -m, --module

Name of the module

=item -b, --buildspec

Name of a build specification file.  The build specification file is
used B<instead> of options and should be a YAML file that looks
something like this:

  project:
    git: https://github.com/rlauer6/perl-Amazon-Credentials
    description: "AWS credentials discoverer"
    author:
      name: Rob Lauer
      mailto: rlauer6@comcast.net
  pm_module: Amazon::Credentials
  dependencies:
    resolver: scandeps
  path:
    pm_module: src/main/perl/lib
    tests: %src/main/perl/t

The sections are described below:

=over 10

=item project

=over 15

=item git

The path to the C<git> project. When the project is cloned, the
utility will look for F<configure.ac> and if found will attempt to
build the project in usual I<autoconfiscated> manner:

 git clone {project}
 autoconf -i --force
 ./configure
 make

...otherwise the project will simply be cloned and it will be assumed
the Perl module is somewhere to be found in the project tree.  You
should make sure that you set the C<path> section accordingly so that
the utility now knows were to find your Perl module though.

=item description

The description of the module as it will be appear in the CPAN
repository.

=item author

The I<author> section should contain a name and email address.

=over 20

=item name

The author's name.

=item mailto

The author's email address.

=back

=back

=item pm_module

The name of the Perl module.

=item dependencies (optional)

The I<dependencies> section, if present may contain the fully
qualified path name to a file that contains a list of dependencies. If
the name of the file is F<cpanfile>, then the file is assumed to be in
I<cpanfile> format, otherwise the file should be a simple list of Perl
module names.

By default, the scripts will use F</usr/lib/rpm/perl.req> as the
dependency resolver, however you can override this by specifying the
name of program that will produce a list of modules.  If you specify
the special name I<scandeps>, the scripts will use F<scandeps.pl>.

=over 15

=item path (optional)

Fully qualified path to a dependency list.

=item resolver (optional)

Name of a program that will provide a list of depenencies when passed
a module name.

=back

=item path (optional)

=over 15

=item pm_module

The path where the Perl module to be packaged can be found.  By
default, the current working directory will be searched.

=item tests (optional)

The path where tests to be specified in the F<Makefile.PL> will be found.

=back

=item provides (optional)

By default the package will provide the module to be packaged and any
files included that were found if the C<recurse> option was specified.

=item recurse (optional)

Specifies whether to or not to looks in subdirectories of path
specified by C<pm_module> for additional modules to pakcages.  The
default is 'yes'.  Valid values are "yes" or "now".

=item extra (optional)

Name of a file that contains a list of files to be included in the package.

=item extra-files (optional)

List of files to be included in package.

Example:

 extra-files:
   - ChangeLog
   - README

=item exe_files (optional)

Path to look for C<.pl> and C<.sh> files to package.

=back

=item -a, --author

When supplying the author on the command line, include the email
address in angle brackets as shown in the example.

Example: -a 'Rob Lauer <rlauer6@comcast.net>'

=item -A, --abstract

Short description of the module purpose.

=item -r, --requires

Name of the dependency file list if other than F<requires>.

=item -t, --test-requires

Name of the test dependencies file if other than F<test-requires>.

=item -c, --cleanup

Cleanup temp directories and files.  Default is to cleanup, use
--no-cleanup if you want to examine some of the temporary files.

=item -v, --version

Returns the version of this script

=back

Note: Set the environment variable C<PRESERVE_MAKEFILE> if you want
the script to preserver the F<Makefile.PL>.  It will be copied to your
current working directory.

=head1 DEPENDENCIES

By default the script will look for dependencies in files named
F<requires> and F<test-requires>.  These are typically created by the
C<bash> script and the files are transparent to you during the
creation of the distribution.

You can specify a different name for the files with the C<-r> and
C<-t> options.

 B<You must however have a filed that contains the dependency list.>

Again, if you use the C<bash> script that invokes this utility or are
calling this utility with a F<buildspec.yml> file, these files will be
I<automatically> created for you based on your options.  If you provide
your own F<requires> or F<test-requires> file, modules should be
listed as:

  module-name, version

Example:

 AWS::Signature4,1.02
 ...

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut

sub get_requires {
  my $requires = shift;
  
  open my $fh, '<', $requires
    or croak "Could not get pre-requisites ($requires)\n";

  my %modules;
  
  while (my $line = <$fh>) {
    chomp $line;
    my ($module, $version) = split /\s/, $line;
    $modules{$module} = $version;
  }
  
  close $fh;
  
  return \%modules;
}

sub get_modules {
  my $module_list = shift;
  
  my @modules;
  
  open my $fh, '<', $module_list
    or croak "Could not open module list\n";
  
  while (my $line = <$fh>) {
    chomp $line;
    push @modules, $line;
  }
  
  close $fh;
  
  return \@modules;
}

sub help {
  print <<eot;
usage: $0 OPTIONS

Example: $0 -m Some::Module -a 'Rob Lauer <rlauer6\@comcast.net>' -d 'my wonderful module'

OPTIONS
-------
-c, --cleanup         cleanup files, this is default
                      use --no-cleanup to prevent cleanup
-a, --author          author
-A, --any             do not require a version
-b, --buildspec       read a buildspec and create command line
-d, --abstract        abstract
-m, --module          module name
-M, --module-list     list of modules to include in distribution
-n, --noversion       do not include versions
-r, --requires        dependency list
-t, --test-requires   test dependencies
-s, --scandeps        use scandeps for dependency checking
-v, --version         version

Typically, this script is called from the bash helper script of the same
name (make-cpan-dist) or is invoked with a YAML file that specifies
the parmeters used to build a distribution.

See https://github.com/rlauer6/make-cpan-dist.git for more documentation.

See man make-cpan-dist

eot
}

my %options = (cleanup => 1 );

GetOptions(\%options,
           "abstract|A=s",
           "author|a=s",
           "buildspec=s",
           "cleanup!",
           "dryrun",
           "debug|D",
           "exe-files=s",
           "help=s",
           "noversion|n",
           "module=s",
           "requires|r=s",
           "scandeps",
           "test-requires=s",
           "verbose|V",
           "version|v=s"
          );

if ( $options{version} ) {
  print "make-cpan-dist.pl v$VERSION\n";
  exit;
}

if ( $options{buildspec} ) {
  croak 'file not found or empty ' . $options{buildspec} . "\n"
    if ! -s $options{buildspec};
  
  my $buildspec = eval {
    LoadFile($options{buildspec});
  };
  
  croak 'could not read ' . $options{buildspec} . "\n$EVAL_ERROR\n"
    if $EVAL_ERROR;

  #version: 0.1
  #
  #project:
  #  git: https://github.com/rlauer6/perl-Amazon-Credentials
  #  description: "AWS credentials discoverer"
  #  author:
  #    name: Rob Lauer
  #    mailto: rlauer6@comcast.net
  #pm_module: Amazon::Credentials
  #path:
  #  pm_module: src/main/perl/lib
  #  tests: %src/main/perl/t
  #  extra: extra-files
  #  extra-files:
  #    ../ChangeLog
  #destdir: directory for output
  
  my %args;
  
  # -m 
  if ( $buildspec->{pm_module} ) {
    $args{m} = $buildspec->{pm_module};
  }
  
  if ( defined $buildspec->{'include-version'} ) {
    if ( $buildspec->{'include-version'} =~/^(no|0|off)$/ ) {
      $args{A} = '';
    }
  }
  
  if ( $buildspec->{project} ) {
    # -a 
    if ( $buildspec->{project}->{author} ) {
      $args{a} = $buildspec->{project}->{author}->{name};
      $args{a} .= " <" . $buildspec->{project}->{author}->{mailto} . ">"
        if $buildspec->{project}->{author}->{mailto};
      
      $args{a} = sprintf("'%s'", $args{a});
    }
    
    # -d
    $args{d} = sprintf("'%s'", $buildspec->{project}->{description}) 
      if $buildspec->{project}->{description};
    
    # -g
    $args{g} = $buildspec->{project}->{git} 
      if $buildspec->{project}->{git};
  }

  # dependencies:
  #   resolver:
  #   path:
  if ( $buildspec->{dependencies} ) {
    if ( $buildspec->{dependencies}->{path} ) {
      $args{D} = $buildspec->{dependencies}->{path};
    }
    
    if ( my $resolver = $buildspec->{dependencies}->{resolver} ) {
      if ( $resolver eq 'scandeps' ) {
        $args{s} = '';
      }
      else {
        $args{r} = $buildspec->{dependencies}->{resolver};
      }
    }
    
    if ( $args{D} && $args{r} ) {
      croak "use either path or resolver for dependencies, but not both\n";
    }
  }

  # the default if not provided in the bash script is always YES!
  if ( $buildspec->{path} ) {
    if ( $buildspec->{path}->{recurse} && $buildspec->{path}->{recurse} =~/(yes|no)/ ) {
      $args{R} = $buildspec->{path}->{recurse};
    }
    elsif ($buildspec->{path}->{recurse}) {
      croak "use only yes or no for 'recurse' option\n";
    }
    
    # -l
    $args{l}= $buildspec->{path}->{pm_module}
      if $buildspec->{path}->{pm_module};

    # -e
    $args{e}= $buildspec->{path}->{exe_files}
      if $buildspec->{path}->{exe_files};
    
    # -t
    $args{t}= $buildspec->{path}->{tests}
      if $buildspec->{path}->{tests};
  }
  
  foreach (keys %args) {
    $args{"-$_"} = $args{$_};
    delete $args{$_};
  }
  
  $args{'-v'} = ''
    if $options{verbose};

  $args{'-o'} = $buildspec->{destdir}
    if $buildspec->{destdir};

  $args{'-x'} = ''
    if ! $options{'cleanup'};

  # filename specified 
  if ( $buildspec->{extra} ) {
    $args{'-f'} = $buildspec->{extra};
  }
  
  # scandeps
  $args{'-s'} = ''
    if $options{scandeps};

  $args{'-A'} = ''
    if $options{noversion};
  
  if ( $buildspec->{'extra-files'} && reftype($buildspec->{'extra-files'}) eq 'ARRAY' ) {
    my $extra_files = $buildspec->{extra} || 'extra-files';
    
    open (my $fh, ">$extra_files") or
      croak "could not append to $extra_files\n";
    
    foreach (@{$buildspec->{'extra-files'}}) {
      print $fh "$_\n";
    }
    
    close $fh;
    $args{'-f'} = "$extra_files";
  }
  
  if ( $buildspec->{provides} ) {
    open (my $fh, ">provides");
    
    foreach (@{$buildspec->{provides}}) {
      print $fh "$_\n";
    }
    
    close $fh;
    $args{'-P'} = "provides";
  }
  
  if ( !$options{dryrun} ) {
    exec '@bindir@/make-cpan-dist ' . join(" ", %args);
  }
  else {
    print  '@bindir@/make-cpan-dist ' . join(" ", %args) . "\n";
    exit 0;
  }
}

my $module=$options{module};
my $author = $options{author} || 'Anonyous <anonymous@example.com>';
my $abstract = $options{abstract} || 'my awesome Perl module!';

if ( $options{help} || ! ($module && $author && $abstract) ) {
  help;
  exit;
}

croak "no dependencies\n"
  if ! $options{requires};

while ($module =~s/::/\//g) {}
$module = 'lib/' . $module . '.pm';

$Data::Dumper::Terse = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Indent = 2;
$Data::Dumper::Pad = ' '  x 4;

$options{requires} = $options{requires} || 'requires';
$options{'test-requires'} = $options{'test-requires'} || 'test-requires';

my $pre_req =  Dumper get_requires($options{requires});
$pre_req =~s/^\s*(.*?)$/$1/m;
    chomp $pre_req;
    
my $test_req = {};

if ( $options{'test-requires'} && -s $options{'test-requires'} ) {
  $test_req = Dumper get_requires($options{'test-requires'});
  $test_req =~s/^\s*(.*?)$/$1/m;
}
else {
  $test_req = Dumper $test_req;
}

my @exe_file_list;

if ( $options{'exe-files'} && -s $options{'exe-files'} ) {
  open (my $fh, '<' . $options{'exe-files'})
    or croak "could not open " . $options{'exe-files'} . "\n";
  
  while (<$fh>) {
    chomp;
    s/^.*\/(.*)$/bin\/$1/;
    push @exe_file_list, $_;
  };
  close $fh;
}

my $exe_files = Dumper \@exe_file_list;

my $META_MERGE;

if ( -e "provides" ) {

  open my $fh, '<', 'provides'
    or croak "could not open provides\n";

  my %provides;
  
  while (my $module = <$fh>) {
    chomp $module;
    
    my $file = join("/", split /::/, $module) . '.pm';
    my $version;
    
    {
      require $file;
      $version = eval "\$${module}::VERSION";
    }
    
    $provides{$module} = { file => "lib/$file", version => "$version" };
  }
  
  close $fh;

  {
    $Data::Dumper::Pair = '=>';
    $META_MERGE = "META_MERGE => " . Dumper({"meta-spec" =>  { version => 2},
                                             "provides" => \%provides });
  }
  
  print STDERR $META_MERGE
    if $options{debug};
}

my $MAKEFILE = <<eot;

use strict;
use warnings;
use ExtUtils::MakeMaker;

WriteMakefile(
    NAME           => '$options{module}',
    AUTHOR         => '$author',
    VERSION_FROM   => '$module',
    ABSTRACT       => '$abstract',
    LICENSE        => 'perl',
    PL_FILES       => {},
    EXE_FILES      => $exe_files,
    PREREQ_PM      => $pre_req,
    TEST_REQUIRES  => $test_req,
    $META_MERGE
);
eot

print STDERR $MAKEFILE;
print $MAKEFILE;

